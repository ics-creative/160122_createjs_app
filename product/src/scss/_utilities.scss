//
// Floats
//

.clearfix {
  @include clearfix();
}

.center-block {
  @include center-block();
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    .pull-#{$breakpoint}-left {
      @include pull-left();
    }
    .pull-#{$breakpoint}-right {
      @include pull-right();
    }
    .pull-#{$breakpoint}-none {
      float: none !important;
    }
  }
}


//
// Screenreaders
//

.sr-only {
  @include sr-only();
}

.sr-only-focusable {
  @include sr-only-focusable();
}

.invisible {
  visibility: hidden !important;
}

.text-hide {
  @include text-hide();
}


//
// Text
//

// Alignment

.text-justify        { text-align: justify !important; }
.text-nowrap         { white-space: nowrap !important; }
.text-truncate       { @include text-truncate; }

// Responsive alignment

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    .text-#{$breakpoint}-left   { text-align: left !important; }
    .text-#{$breakpoint}-right  { text-align: right !important; }
    .text-#{$breakpoint}-center { text-align: center !important; }
  }
}

// Transformation

.text-lowercase      { text-transform: lowercase !important; }
.text-uppercase      { text-transform: uppercase !important; }
.text-capitalize     { text-transform: capitalize !important; }

// Weight and italics

.font-weight-normal  { font-weight: normal; }
.font-weight-bold    { font-weight: bold; }
.font-italic         { font-style: italic; }

// Contextual colors

.text-muted {
  color: $text-muted;
}

@include text-emphasis-variant('.text-primary', $brand-primary);

@include text-emphasis-variant('.text-success', $brand-success);

@include text-emphasis-variant('.text-info', $brand-info);

@include text-emphasis-variant('.text-warning', $brand-warning);

@include text-emphasis-variant('.text-danger', $brand-danger);


// from here
// https://github.com/wolfika/bootstrap/blob/69211ab8766d8f7eefe970f15048ae0b8d7bf2fc/scss/_utilities.scss


//
// Utility functions
//

// Strips the unit from a single value entered.
// E.g. `strip-unit(30px)` returns `30`

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Converts numeric value(s) to rem units, based
// on the $font-size-root variable.
// E.g. `rem-calc(14px 16px 0)` returns `0.875rem 1rem 0`

@function rem-calc($values) {
  $rem-values: ();

  @each $value in $values {
    @if ($value > 0) {
      $value: strip-unit($value) / strip-unit($font-size-root) * 1rem;
    } @else {
      $value: 0; // ensure that `0rem` becomes unitless
    }

    $rem-values: append($rem-values, $value);
  }

  @return $rem-values;
}

